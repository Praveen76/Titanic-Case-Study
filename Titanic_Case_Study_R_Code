rm(list=ls())
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm

#Now that our packages are loaded, let's read in and take a peek at the data.

train <- read.csv('train.csv', stringsAsFactors = F)
test  <- read.csv('test.csv', stringsAsFactors = F)
full  <- bind_rows(train, test) # bind training & test data

#Exploratory full Analysis
#understand the full type
str(full)

#Convert into proper full types
full$Name = as.character(full$Name)
full$Cabin = as.character(full$Cabin)
full$Survived = as.factor(full$Survived)
full$Ticket = as.character(full$Ticket)
str(full)

#Look at the block of full
head(full, 10)
tail(full, 10)

#Let us drive some variables (feature engineering)
# Grab title from passenger names
full$Title = gsub('(.*, )|(\\..*)', '', full$Name)

# Show title counts by sex
table(full$Sex, full$Title)

## create few categories
rare_title = c('Lady', 'the Countess','Capt', 'Col', 'Don', 
               'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')

# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle'] = 'Miss' 
full$Title[full$Title == 'Ms'] = 'Miss'
full$Title[full$Title == 'Mme'] = 'Mrs' 
full$Title[full$Title %in% rare_title] = 'Rare Title'

# Show title counts by sex again
table(full$Sex, full$Title)

# Create a family size variable including the passenger themselves
full$Fsize = full$SibSp + full$Parch + 1

#Bin family size
full$FsizeD[full$Fsize == 1] = 'single'
full$FsizeD[full$Fsize > 1 & full$Fsize < 4] = 'small'
full$FsizeD[full$Fsize > 4] = 'large'

#extract first letter from string
full$block = substring(full$Cabin, 1, 1)

#replace empty spaces with No cabin
full$block[full$block == ""] = "NoCabin"


#Missing value analysis
apply(full,2, function(x)sum(is.na(x)))

#replace all empty spaces with missing values
full = data.frame(apply(full, 2, function(x) gsub("^$|^ $", NA, x)))

#test missingness
apply(full,2, function(x)sum(is.na(x)))

#store in dataframe
df_missing = data.frame(Variables = colnames(full), 
                        Count = apply(full,2, function(x)sum(is.na(x))))
row.names(df_missing) = NULL

#impute missing value with different methods
#Let us start experiment
#Impute missing value with mean/median
full$Age = as.numeric(full$Age)
# full$Age[is.na(full$Age)] = mean(full$Age, na.rm = TRUE) 
# full$Age[is.na(full$Age)] = median(full$Age, na.rm = TRUE) 

#actual value of full[5,6] = 48, mean = 39.8331, median = 37, KNN = 41.47
#KNN imputation
library(DMwR)
full = knnImputation(full)
sum(is.na(full))
md.pattern(full)
#test missingness
apply(full,2, function(x)sum(is.na(x)))

#Normalized Data
full$Age = (full$Age - min(full$Age))/(max(full$Age) - min(full$Age))

full$Fare = as.numeric(full$Fare)
full$Fare = (full$Fare - min(full$Fare))/(max(full$Fare) - min(full$Fare))

# ##Detect outliers
#  #Univariate approach
#  outlier_values <- boxplot.stats(full$Age)$out  # outlier values.
#  outlier_values
#  find_outlier = which(outlier_tf == TRUE , arr.ind = TRUE)
#  
#  boxplot(full$Age, main="Age", boxwex=0.1)
#  mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)'
 
# ##Treat outliers
#  outlier_incdices <- full[c(117,631,673,746,988),]
# full[631,6]<-mean(full$Age) 
# full[117,6]<-mean(full$Age)
#  full[631,6]<-mean(full$Age)
#  full[673,6]<-mean(full$Age)
#  full[746,6]<-mean(full$Age)
#  full[988,6]<-mean(full$Age)
# full[34,6]<-mean(full$Age)
# full[852,6]<-mean(full$Age)
# full[973,6]<-mean(full$Age)
#  

#4 Prediction
# Split the data back into a train set and a test set
train <- full[1:892,]
test <- full[892:1309,]

# Build the model (note: not all possible variables are used)
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + 
                           Fare + Embarked + Title + 
                           Fsize + block, data = test, na.action=na.omit)

# Show model error
plot(rf_model, ylim=c(0,0.60))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)

# Get importance
importance = importance(rf_model)

varImportance = data.frame(Variables = row.names(importance), 
                           Importance = round(importance[ , 'MeanDecreaseGini'], 2))

# Create a rank variable based on importance
rankImportance = varImportance %>%
  mutate(Rank = paste0('#',dense_rank(desc(Importance))))

# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance), 
                           y = Importance, fill = Importance)) +
  geom_bar(stat='identity') + 
  geom_text(aes(x = Variables, y = 0.5, label = Rank),
            hjust=0, vjust=0.55, size = 4, colour = 'red') +
  labs(x = 'Variables') + coord_flip() + theme_few()

## Predict using the test set
prediction <- predict(rf_model, test)
xtab = table(observed = test[,2], predicted = prediction)
confusionMatrix(xtab)

# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
titanic <- data.frame(PassengerID = test$PassengerId, Survived = prediction)

# Write the solution to file
write.csv(titanic, file = 'titanic_rf_mod_Solution.csv', row.names = F)


